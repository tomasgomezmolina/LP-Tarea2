package Game;import lp.motor.Element;import java.awt.*;import java.util.Vector;public class Piece {    public static Piece movingPiece = null;    private int x, y, equipo, identificador;    private boolean clicked = false;    Piece aEliminar;    private boolean esDama = false;    private Element.Type elemento;    PowerUP powerUP;    Vector<PowerUP> powerUPs;    public Piece(int x, int y, int equipo, Element.Type elemento) {        this.x = x;        this.y = y;        this.equipo = equipo;        this.esDama = esDama;        this.elemento = elemento;    }    public int getX() {        return x;    }    public void setX(int x) {        this.x = x;    }    public int getY() {        return y;    }    public void setY(int y) {        this.y = y;    }    public int getEquipo() {        return equipo;    }    public boolean getesDama(){        return esDama;    }    public void hacerDama() {        this.esDama = true;    }    public Element.Type getElemento() {        return elemento;    }    public void setElemento() {    }    /*public void drawPiece(Graphics graphics) {        if (equipo == 1) {            if (esDama) {                graphics.setColor(Color.yellow);            }            else {                graphics.setColor(Color.blue);            }        } else {            if (esDama) {                graphics.setColor(Color.orange);            }            else {                graphics.setColor(Color.red);            }        }        graphics.fillOval(x, y, 40, 40);    }*/    public void drawPiece(Graphics graphics) {        if (equipo == 1) {            if (elemento == Element.Type.FIRE ) {                graphics.setColor(Color.red);                graphics.fillOval(x, y, 40, 40);                graphics.setColor(Color.black);                graphics.fillOval(x-5, y-5, 15, 15);            }            else if (elemento == Element.Type.WATER){                graphics.setColor(Color.blue);                graphics.fillOval(x, y, 40, 40);                graphics.setColor(Color.black);                graphics.fillOval(x-5, y-5, 15, 15);            }            else if (elemento == Element.Type.LEAF ) {                graphics.setColor(Color.green);                graphics.fillOval(x, y, 40, 40);                graphics.setColor(Color.black);                graphics.fillOval(x-5, y-5, 15, 15);            }           if (esDama) {               graphics.setColor(Color.yellow);               graphics.fillOval(x+10, y+10, 20, 20);           }        } else if (equipo == 2) {            if (elemento == Element.Type.FIRE ) {                graphics.setColor(Color.red);                graphics.fillOval(x, y, 40, 40);                graphics.setColor(Color.white);                graphics.fillOval(x-5, y-5, 15, 15);            }            else if (elemento == Element.Type.WATER){                graphics.setColor(Color.blue);                graphics.fillOval(x, y, 40, 40);                graphics.setColor(Color.white);                graphics.fillOval(x-5, y-5, 15, 15);            }            else if (elemento == Element.Type.LEAF ) {                graphics.setColor(Color.green);                graphics.fillOval(x, y, 40, 40);                graphics.setColor(Color.white);                graphics.fillOval(x-5, y-5, 15, 15);            }            if (esDama) {                graphics.setColor(Color.orange);                graphics.fillOval(x+10, y+10, 20, 20);            }            /*            else { // power up!!!                graphics.setColor(Color.magenta);                graphics.fillOval(x, y, 30, 30);            }            */        }    }    public boolean sonIguales(Point point, Vector<Piece> pieces1, Vector<Piece> pieces2) {        for (Piece pieza : pieces1) {            if (((point.x / 50) * 50 + 5) == pieza.getX() && ((point.y / 50) * 50 + 5) == pieza.getY()) {                return false;            }        }        for (Piece pieza : pieces2) {            if (((point.x / 50) * 50 + 5) == pieza.getX() && ((point.y / 50) * 50 + 5) == pieza.getY()) {                return false;            }        }        return true;    }    public boolean vacio(int x, int y, Vector<Piece> pieces1, Vector<Piece> pieces2) {        for (Piece pieza : pieces1) {            if (pieza.x == x && pieza.y == y) {                return false;            }        }        for (Piece pieza : pieces2) {            if (pieza.x == x && pieza.y == y) {                return false;            }        }        return true;    }    public boolean preComer(Point point, Piece piezaEnMovimiento, Vector<Piece> pieces1, Vector<Piece> pieces2, int turno) {        if (turno % 2 == 0) {            for (Piece pieza : pieces2) {                if ((piezaEnMovimiento.x + 50 == pieza.x) && (piezaEnMovimiento.y + 50 == pieza.y)) { //existe pieza en la diagonal                    if (pieza.vacio((pieza.x) + 50, (pieza.y) + 50, pieces1, pieces2) && (point.x == pieza.x + 50 && point.y == pieza.y + 50)) return true; // el sieguiente espacio en la diagonal esta vacio                } else if ((piezaEnMovimiento.x - 50 == pieza.x) && (piezaEnMovimiento.y + 50 == pieza.y)) {                    if (pieza.vacio((pieza.x) - 50, (pieza.y) + 50, pieces1, pieces2) && (point.x == pieza.x - 50 && point.y == pieza.y + 50)) return true;                }                else if (piezaEnMovimiento.getesDama()){                    if ((piezaEnMovimiento.x + 50 == pieza.x) && (piezaEnMovimiento.y + 50 == pieza.y)) { //existe pieza en la diagonal                        if (pieza.vacio((pieza.x) + 50, (pieza.y) + 50, pieces1, pieces2) && (point.x == pieza.x + 50 && point.y == pieza.y + 50)) return true;                    } else if ((piezaEnMovimiento.x - 50 == pieza.x) && (piezaEnMovimiento.y + 50 == pieza.y)) {                        if (pieza.vacio((pieza.x) - 50, (pieza.y) + 50, pieces1, pieces2) && (point.x == pieza.x - 50 && point.y == pieza.y + 50)) return true;                    }                    else if ((piezaEnMovimiento.x + 50 == pieza.x) && (piezaEnMovimiento.y - 50 == pieza.y)) { //existe pieza en la diagonal                        if (pieza.vacio((pieza.x) + 50, (pieza.y) - 50, pieces1, pieces2) && (point.x == pieza.x + 50 && point.y == pieza.y - 50)) return true;                    } else if ((piezaEnMovimiento.x - 50 == pieza.x) && (piezaEnMovimiento.y - 50 == pieza.y)) {                        if (pieza.vacio((pieza.x) - 50, (pieza.y) - 50, pieces1, pieces2) && (point.x == pieza.x - 50 && point.y == pieza.y - 50)) return true;                    }                }            }        } else {            for (Piece pieza : pieces1) {                if ((piezaEnMovimiento.x + 50 == pieza.x) && (piezaEnMovimiento.y - 50 == pieza.y)) { //existe pieza en la diagonal                    if (pieza.vacio((pieza.x) + 50, (pieza.y) - 50, pieces1, pieces2) && (point.x == pieza.x + 50 && point.y == pieza.y - 50)) return true; // el sieguiente espacio en la diagonal esta vacio                } else if ((piezaEnMovimiento.x - 50 == pieza.x) && (piezaEnMovimiento.y - 50 == pieza.y)) {                    if (pieza.vacio((pieza.x) - 50, (pieza.y) - 50, pieces1, pieces2) && (point.x == pieza.x - 50 && point.y == pieza.y - 50)) return true;                }                else if (piezaEnMovimiento.getesDama()){                    if ((piezaEnMovimiento.x + 50 == pieza.x) && (piezaEnMovimiento.y + 50 == pieza.y)) { //existe pieza en la diagonal                        if (pieza.vacio((pieza.x) + 50, (pieza.y) + 50, pieces1, pieces2) && (point.x == pieza.x + 50 && point.y == pieza.y + 50)) return true;                    } else if ((piezaEnMovimiento.x - 50 == pieza.x) && (piezaEnMovimiento.y + 50 == pieza.y)) {                        if (pieza.vacio((pieza.x) - 50, (pieza.y) + 50, pieces1, pieces2) && (point.x == pieza.x - 50 && point.y == pieza.y + 50)) return true;                    }                    else if ((piezaEnMovimiento.x + 50 == pieza.x) && (piezaEnMovimiento.y - 50 == pieza.y)) { //existe pieza en la diagonal                        if (pieza.vacio((pieza.x) + 50, (pieza.y) - 50, pieces1, pieces2) && (point.x == pieza.x + 50 && point.y == pieza.y - 50)) return true;                    } else if ((piezaEnMovimiento.x - 50 == pieza.x) && (piezaEnMovimiento.y - 50 == pieza.y)) {                        if (pieza.vacio((pieza.x) - 50, (pieza.y) - 50, pieces1, pieces2) && (point.x == pieza.x - 50 && point.y == pieza.y - 50)) return true;                    }                }            }        }        return false;    }    public Piece piezaAEliminar( Piece piezaEnMovimiento, Point point,  Vector<Piece> pieces1, Vector<Piece> pieces2, int turno) {        if (turno % 2 == 0) {            for (Piece pieza : pieces2) {                if ((piezaEnMovimiento.x + 50 == pieza.x) && (piezaEnMovimiento.y + 50 == pieza.y) && (point.x == pieza.x + 50 && point.y == pieza.y + 50)) return pieza;                else if ((piezaEnMovimiento.x - 50 == pieza.x) && (piezaEnMovimiento.y + 50 == pieza.y) && (point.x == pieza.x - 50 && point.y == pieza.y + 50)) return pieza;                else if (piezaEnMovimiento.getesDama()){                    if ((piezaEnMovimiento.x + 50 == pieza.x) && (piezaEnMovimiento.y + 50 == pieza.y) && (point.x == pieza.x + 50 && point.y == pieza.y + 50)) return pieza;                    else if ((piezaEnMovimiento.x - 50 == pieza.x) && (piezaEnMovimiento.y + 50 == pieza.y) && (point.x == pieza.x - 50 && point.y == pieza.y + 50)) return pieza;                    else if ((piezaEnMovimiento.x + 50 == pieza.x) && (piezaEnMovimiento.y - 50 == pieza.y) && (point.x == pieza.x + 50 && point.y == pieza.y - 50)) return pieza;                    else if ((piezaEnMovimiento.x - 50 == pieza.x) && (piezaEnMovimiento.y - 50 == pieza.y) && (point.x == pieza.x - 50 && point.y == pieza.y - 50)) return pieza;                }            }        }        else {        for (Piece pieza : pieces1) {            if ((piezaEnMovimiento.x + 50 == pieza.x) && (piezaEnMovimiento.y - 50 == pieza.y) && (point.x == pieza.x + 50 && point.y == pieza.y - 50)) return pieza;            else if ((piezaEnMovimiento.x - 50 == pieza.x) && (piezaEnMovimiento.y - 50 == pieza.y) && (point.x == pieza.x - 50 && point.y == pieza.y - 50)) return pieza;            else if (piezaEnMovimiento.getesDama()){                if ((piezaEnMovimiento.x + 50 == pieza.x) && (piezaEnMovimiento.y + 50 == pieza.y) && (point.x == pieza.x + 50 && point.y == pieza.y + 50)) return pieza;                else if ((piezaEnMovimiento.x - 50 == pieza.x) && (piezaEnMovimiento.y + 50 == pieza.y) && (point.x == pieza.x - 50 && point.y == pieza.y + 50)) return pieza;                else if ((piezaEnMovimiento.x + 50 == pieza.x) && (piezaEnMovimiento.y - 50 == pieza.y) && (point.x == pieza.x + 50 && point.y == pieza.y - 50)) return pieza;                else if ((piezaEnMovimiento.x - 50 == pieza.x) && (piezaEnMovimiento.y - 50 == pieza.y) && (point.x == pieza.x - 50 && point.y == pieza.y - 50)) return pieza;            }        }    }        return null;}    public void comer(Piece pieza, Vector<Piece> pieces1, Vector<Piece> pieces2) { // eliminar pieza comida        if (pieza.getEquipo() ==  1) {            pieces1.remove(pieza);        }        else {            pieces2.remove(pieza);        }    }    public Point aproxPunto(Point point) {        point.x = (point.x / 50) * 50 + 5;        point.y = (point.y / 50) * 50 + 5;        return point;    }    public boolean quienGana(Piece pieza, Piece piezaAEliminar){        if (pieza.getElemento() == piezaAEliminar.getElemento() || (pieza.getElemento() == Element.Type.FIRE && piezaAEliminar.getElemento() == Element.Type.LEAF)) return true;        else if (pieza.getElemento() == Element.Type.LEAF && piezaAEliminar.getElemento() == Element.Type.WATER) return true;        else if (pieza.getElemento() == Element.Type.WATER && piezaAEliminar.getElemento() == Element.Type.FIRE) return  true;        return false;    }    /*public void crearPowerUPs(Vector<Piece> pieces1, Vector<Piece> pieces2, Piece pieza) {        powerUPs = new Vector<>();        int cont = 0;        for (int x = 505; x >= 55; x = x - 50){            for (int y = 255; y>= 55; y = y - 50){                if (pieza.vacio(x, y,pieces1, pieces2) && cont <=1){                    powerUP = new PowerUP(x, y, 3, Element.Type.LEAF,cont);                    powerUPs.add(powerUP);                    cont++;                }            }        }    }    */}